{"version":3,"sources":["api/constants.ts","api/HTTP.ts","api/ServiceFactory.ts","api/users-services/index.ts","pages/users-page/users-list/useUsersLists.ts","pages/users-page/users-list/constants.ts","styles/device.ts","pages/users-page/users-list/styles.tsx","pages/users-page/users-list/index.tsx","pages/users-page/search-bar/styles.tsx","pages/users-page/search-bar/index.tsx","pages/users-page/styles.tsx","pages/users-page/index.tsx","pages/users-page/useUsersPage.ts","pages/users-page/constants.ts","theme/mediaQueries.ts","theme/schema.ts","app/useApp.ts","theme/useTheme.ts","app/styles.tsx","theme/GlobalStyles.ts","app/index.tsx","index.tsx"],"names":["USERS_ENDPOINT","ERROR_MESSAGE","HTTP","isThrowError","axios","create","baseURL","PROPER_INSTANCE","interceptors","response","use","error","console","services","users","getUsers","get","ALL_USERS","name","ServiceFactory","size","device","mobileSmall","mobileMedium","mobileLarge","tablet","laptop","laptopLarge","desktop","lightGreyColor","css","displayFlexLeft","deviceFont","typeDevice","font","deviceFlex","Container","styled","div","IndexUser","span","UserDetails","UserName","findUserPhrease","useState","list","filtredList","usersList","setUsersList","takeAllUsers","useCallback","a","data","filterData","prevState","filter","toLowerCase","trim","includes","useEffect","length","useUsersList","map","index","username","id","deviceSizeAndFont","maxWidth","deviceMaxWidth","StyledInput","input","onChange","type","placeholder","deviceWidth","width","Content","Header","header","setFindUserPhrease","e","target","value","useUsersPage","SIZE","MEDIA_QURIES","smartphones","smallTablet","Theme","colors","fonts","primary","white","grey","greySecondary","body","secondary","greyPrimary","hoverColor","black","text","label","button","background","link","opacity","mediaQueries","THEMES","main","otherTheme","useApp","allThemes","theme","setTheme","themeLoaded","setThemeLoaded","handleSetTheme","localThemes","setMode","mode","useTheme","selectedTheme","setSelectedTheme","devicePadding","padding","GlobalStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11dad12d.chunk.js","sourcesContent":["//urls\r\nexport const BASE_URL = 'https://jsonplaceholder.typicode.com';\r\nexport const MOCKED_BASE_URL = 'https://mocked-url';\r\n//paths\r\nexport const USERS_ENDPOINT = '/users';\r\n//errors\r\nexport const UNABLE_TO_CHECK_RESPONSE_STATUS = 'Unable to check response';\r\nexport const ERROR_MESSAGE = 'Something went wrong';\r\n\r\n//others\r\nexport const TEST_ENV = 'test';\r\n","import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\n\r\nimport { mockMetadata } from './mock';\r\n\r\nimport { BASE_URL, MOCKED_BASE_URL, TEST_ENV, UNABLE_TO_CHECK_RESPONSE_STATUS } from './constants';\r\n\r\nexport const HTTP = (isThrowError: boolean): AxiosInstance => {\r\n  const IS_TEST_ENVIRONMENT = process.env.NODE_ENV === TEST_ENV;\r\n\r\n  //this varialbe decide from where you will take response - true(mock data), false(real data). By default should be false.\r\n  const IS_MOCKED_DATA = IS_TEST_ENVIRONMENT || false;\r\n\r\n  //Mock data http server\r\n  const HTTP_MOCK = axios.create({ baseURL: MOCKED_BASE_URL });\r\n\r\n  //create instance\r\n  const HTTP_INSTANCE = axios.create({\r\n    baseURL: BASE_URL\r\n  });\r\n\r\n  //set a proper instance to handling the data\r\n  const PROPER_INSTANCE = IS_MOCKED_DATA ? HTTP_MOCK : HTTP_INSTANCE;\r\n\r\n  //inceterceptor\r\n  PROPER_INSTANCE.interceptors.response.use(\r\n    (response): AxiosResponse<unknown> => response,\r\n    (error): void => {\r\n      console.error(UNABLE_TO_CHECK_RESPONSE_STATUS, error);\r\n    }\r\n  );\r\n\r\n  //enabled mocked data\r\n  IS_MOCKED_DATA && mockMetadata(HTTP_MOCK, isThrowError);\r\n\r\n  return PROPER_INSTANCE;\r\n};\r\n","import { TRemapedServiceNames, TService, TServicesNames } from './types';\r\n\r\nimport users from './users-services';\r\n\r\n/**\r\n * @const services\r\n * @description Here we add a services which want to inoke in ServiceFactory.\r\n */\r\nconst services: TRemapedServiceNames = {\r\n  users\r\n};\r\n\r\n/**\r\n * @const ServiceFactory\r\n * @description This ServiceFactory contain each services grupped by method name, like get, put, post, ect.\r\n */\r\nexport const ServiceFactory = {\r\n  //Generic type Service name which will be extend one of the TServicesNames - this give us possibility to filtering Services with the returned functions types\r\n  get: <ServiceName extends TServicesNames>(name: TServicesNames): TService[ServiceName] =>\r\n    services[name] as TService[ServiceName]\r\n};\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { HTTP } from '../HTTP';\r\n\r\nimport { TUsersDataList } from 'src/core/typings/Users';\r\n\r\nimport { ERROR_MESSAGE, USERS_ENDPOINT } from '../constants';\r\n\r\nexport default {\r\n  /**\r\n   * @method getUsers\r\n   * @description This method handle fetch user list from API. Return list or message about error.\r\n   */\r\n  async getUsers(isThrowError: boolean): Promise<AxiosResponse<TUsersDataList[]> | typeof ERROR_MESSAGE> {\r\n    try {\r\n      return await HTTP(isThrowError).get(USERS_ENDPOINT);\r\n    } catch (err) {\r\n      console.error(err);\r\n\r\n      return ERROR_MESSAGE;\r\n    }\r\n  }\r\n};\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { ServiceFactory } from 'src/api/ServiceFactory';\r\n\r\nimport { TUsersDataList } from 'src/core/typings/Users';\r\nimport { TUseUsersList } from './types';\r\n\r\nimport { ERROR_MESSAGE } from 'src/api/constants';\r\nimport { USERS } from './constants';\r\n\r\n//Take proper service\r\nconst ALL_USERS = ServiceFactory.get(USERS);\r\n\r\nexport const useUsersList: TUseUsersList = ({ findUserPhrease, isThrowError }) => {\r\n  //useStates\r\n  const [usersList, setUsersList] = useState<{ list: TUsersDataList[] | []; filtredList: TUsersDataList[] | [] }>({\r\n    list: [],\r\n    filtredList: []\r\n  });\r\n\r\n  //handlers\r\n  /**\r\n   * @function takeAllUsers\r\n   * @description This function takes all available users from API.\r\n   */\r\n  const takeAllUsers = useCallback(async (isThrowError: boolean): Promise<void> => {\r\n    const response = await ALL_USERS.getUsers(isThrowError);\r\n\r\n    if (response === ERROR_MESSAGE) {\r\n      //if response is undefined - means some error occured then return empty arrays\r\n      setUsersList(() => ({ list: [], filtredList: [] }));\r\n\r\n      return;\r\n    }\r\n\r\n    if (response && response.data) setUsersList({ list: response.data, filtredList: response.data });\r\n  }, []);\r\n\r\n  /**\r\n   * @function filterData\r\n   * @description This function filters the data from API, when user typing in search bar. If the searchbar is empty then return previous list.\r\n   */\r\n  const filterData = useCallback((): void | '' | null => {\r\n    if (findUserPhrease) {\r\n      //if user type in searchbar value different than null or ''\r\n      setUsersList((prevState) => ({\r\n        ...prevState,\r\n        filtredList: prevState.list.filter(({ name }) =>\r\n          name.toLowerCase().trim().includes(findUserPhrease.toLowerCase().trim())\r\n        )\r\n      }));\r\n\r\n      return;\r\n    }\r\n\r\n    //if user remove all letters then restore previous list\r\n    setUsersList((prevState) => ({ ...prevState, filtredList: prevState.list }));\r\n  }, [findUserPhrease]);\r\n\r\n  //useEffects\r\n  useEffect(() => {\r\n    usersList.list.length === 0 && (async () => await takeAllUsers(isThrowError))();\r\n    filterData();\r\n  }, [findUserPhrease]);\r\n\r\n  return { usersList };\r\n};\r\n","export const USERS = 'users';\r\nexport const LOADING = 'No match users...';\r\n","const size = {\r\n  mobileSmall: '320px',\r\n  mobileMedium: '375px',\r\n  mobileLarge: '425px',\r\n  tablet: '768px',\r\n  laptop: '1024px',\r\n  laptopLarge: '1440px',\r\n  desktop: '2560px'\r\n};\r\n\r\nexport const device = {\r\n  mobileSmall: `(min-width: ${size.mobileSmall})`,\r\n  mobileMedium: `(min-width: ${size.mobileMedium})`,\r\n  mobileLarge: `(min-width: ${size.mobileLarge})`,\r\n  tablet: `(min-width: ${size.tablet})`,\r\n  laptop: `(min-width: ${size.laptop})`,\r\n  laptopLarge: `(min-width: ${size.laptopLarge})`,\r\n  desktop: `(min-width: ${size.desktop})`\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nimport { device } from 'src/styles/device';\r\n\r\nconst lightGreyColor = css`\r\n  color: #cccccc;\r\n`;\r\n\r\nconst displayFlexLeft = css`\r\n  display: flex;\r\n  justify-content: left;\r\n`;\r\n\r\nconst deviceFont = (\r\n  typeDevice: 'mobileSmall' | 'mobileLarge' | 'tablet' | 'laptop' | 'laptopLarge' | 'desktop',\r\n  font: number\r\n) => css`\r\n  @media ${device[typeDevice]} {\r\n    font-size: ${font}rem;\r\n  }\r\n`;\r\n\r\nconst deviceFlex = (typeDevice: 'mobileSmall' | 'mobileLarge' | 'tablet' | 'laptop' | 'laptopLarge' | 'desktop') => css`\r\n  @media ${device[typeDevice]} {\r\n    ${displayFlexLeft}\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  font-size: 1.5rem;\r\n  padding: 1rem;\r\n  width: 100%;\r\n\r\n  @media ${device.mobileSmall} {\r\n    font-size: 1rem;\r\n    padding: 0.5rem 0rem;\r\n  }\r\n\r\n  @media ${device.mobileLarge} {\r\n    font-size: 1.1rem;\r\n    padding: 0.5rem 0rem;\r\n  }\r\n\r\n  ${deviceFont('tablet', 1.2)}\r\n  ${deviceFont('laptop', 1.5)}\r\n  ${deviceFont('mobileLarge', 1.5)}\r\n  ${deviceFont('desktop', 1.5)}\r\n`;\r\n\r\nexport const IndexUser = styled.span`\r\n  width: 10%;\r\n  ${lightGreyColor}\r\n`;\r\n\r\nexport const UserDetails = styled.span`\r\n  display: flex;\r\n  width: 90%;\r\n\r\n  @media ${device.mobileSmall} {\r\n    display: grid;\r\n    justify-content: center;\r\n  }\r\n\r\n  @media ${device.mobileLarge} {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  ${deviceFlex('tablet')}\r\n  ${deviceFlex('laptop')}\r\n  ${deviceFlex('mobileLarge')}\r\n  ${deviceFlex('desktop')}\r\n`;\r\n\r\nexport const UserName = styled.span`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 1.2rem;\r\n  margin-left: 1rem;\r\n  width: 30%;\r\n  ${lightGreyColor}\r\n  ${deviceFont('mobileSmall', 0.9)}\r\n  ${deviceFont('mobileLarge', 0.9)}\r\n  ${deviceFont('tablet', 1)}\r\n  ${deviceFont('laptop', 1.2)}\r\n  ${deviceFont('mobileLarge', 1.2)}\r\n  ${deviceFont('desktop', 1.2)}\r\n`;\r\n","import React from 'react';\r\n\r\nimport { useUsersList } from './useUsersLists';\r\n\r\nimport { TUsersListProps } from './types';\r\n\r\nimport { LOADING } from './constants';\r\n\r\nimport { Container, IndexUser, UserDetails, UserName } from './styles';\r\n\r\nexport default ({ findUserPhrease, isThrowError }: TUsersListProps): JSX.Element => {\r\n  const { usersList } = useUsersList({ findUserPhrease, isThrowError });\r\n\r\n  if (usersList.list.length === 0 || usersList.filtredList.length === 0) return <div>{LOADING}</div>;\r\n\r\n  return (\r\n    <>\r\n      {usersList.filtredList.map(({ name, username, id }, index) => (\r\n        <Container data-testid=\"users-list-container\" key={`${id}${name}`}>\r\n          <IndexUser data-testid=\"users-list-index-user\">{index + 1}.</IndexUser>\r\n          <UserDetails data-testid=\"users-list-user-details\">\r\n            {name} <UserName data-testid=\"users-list-user-name\">@{username}</UserName>\r\n          </UserDetails>\r\n        </Container>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nimport { device } from 'src/styles/device';\r\n\r\nconst deviceSizeAndFont = (typeDevice: 'mobileSmall' | 'mobileLarge', maxWidth: number, font: number) => css`\r\n  @media ${device[typeDevice]} {\r\n    max-width: ${maxWidth}px;\r\n    font-size: ${font}rem;\r\n  }\r\n`;\r\n\r\nconst deviceMaxWidth = (typeDevice: 'tablet' | 'laptop' | 'laptopLarge' | 'desktop', maxWidth: number) => css`\r\n  @media ${device[typeDevice]} {\r\n    max-width: ${maxWidth}px;\r\n  }\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n  font-size: 1.2rem;\r\n  height: 0.5rem;\r\n  margin-bottom: 1rem;\r\n  padding: 1rem;\r\n  width: 100%;\r\n\r\n  ${deviceSizeAndFont('mobileSmall', 280, 1)}\r\n  ${deviceSizeAndFont('mobileLarge', 390, 1)}\r\n  ${deviceMaxWidth('tablet', 430)}\r\n  ${deviceMaxWidth('laptop', 500)}\r\n  ${deviceMaxWidth('laptopLarge', 600)}\r\n  ${deviceMaxWidth('desktop', 800)}\r\n`;\r\n","import React from 'react';\r\n\r\nimport { SearchBarProps } from './types';\r\n\r\nimport { StyledInput } from './styles';\r\n\r\nexport default ({ onChange }: SearchBarProps): JSX.Element => (\r\n  <StyledInput type={'text'} placeholder={'Search by user name...'} onChange={onChange} />\r\n);\r\n","import styled, { css } from 'styled-components';\r\n\r\nimport { device } from 'src/styles/device';\r\n\r\nconst deviceWidth = (\r\n  typeDevice: 'mobileSmall' | 'mobileLarge' | 'tablet' | 'laptop' | 'laptopLarge' | 'desktop',\r\n  width: number\r\n) => css`\r\n  @media ${device[typeDevice]} {\r\n    width: ${width}%;\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  text-align: center;\r\n  ${deviceWidth('mobileSmall', 100)}\r\n  ${deviceWidth('mobileLarge', 60)}\r\n  ${deviceWidth('tablet', 50)}\r\n  ${deviceWidth('laptop', 40)}\r\n  ${deviceWidth('laptopLarge', 30)}\r\n  ${deviceWidth('desktop', 20)}\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  font-size: 2rem;\r\n  height: 3.5rem;\r\n  padding-top: 1rem;\r\n`;\r\n","import React from 'react';\r\n\r\nimport UsersList from './users-list';\r\nimport SearchBar from './search-bar';\r\n\r\nimport { useUsersPage } from './useUsersPage';\r\n\r\nimport { USERS_LIST } from './constants';\r\n\r\nimport { Content, Header } from './styles';\r\n\r\nexport default (): JSX.Element => {\r\n  const { findUserPhrease, onChange } = useUsersPage();\r\n\r\n  return (\r\n    <Content>\r\n      <Header>{USERS_LIST}</Header>\r\n      <SearchBar onChange={onChange} />\r\n      <UsersList findUserPhrease={findUserPhrease} isThrowError={false} />\r\n    </Content>\r\n  );\r\n};\r\n","import { ChangeEvent, useState } from 'react';\r\n\r\nimport { TUseUsersPage } from './types';\r\n\r\nexport const useUsersPage: TUseUsersPage = () => {\r\n  const [findUserPhrease, setFindUserPhrease] = useState<string | null>(null);\r\n\r\n  const onChange = (e: ChangeEvent<HTMLInputElement>): void => setFindUserPhrease(e.target.value);\r\n\r\n  return { findUserPhrease, onChange };\r\n};\r\n","export const USERS_LIST = 'Users list';\r\n","import { css } from 'styled-components';\r\nimport { TCssStylesByDeviceWidth } from './types';\r\n\r\nexport const SIZE = {\r\n  smartphoneMin: 320,\r\n  smartphoneMax: 480,\r\n  smallTablet: 767,\r\n  tabletMin: 768,\r\n  tabletMax: 1024,\r\n  laptopMin: 1025,\r\n  laptopMax: 1280,\r\n  desktop: 1281\r\n};\r\n\r\nexport const MEDIA_QURIES = {\r\n  /*\r\n    ##Device = Most of the Smartphones Mobiles (Portrait)\r\n    ##Screen = B/w 320px to 479px\r\n  */\r\n  smartphones: `(min-width: ${SIZE.smartphoneMin}px)`,\r\n  /*\r\n    ##Device = Low Resolution Tablets, Mobiles (Landscape)\r\n    ##Screen = B/w 481px to 767px\r\n  */\r\n  smallTablet: `(min-width: ${SIZE.smartphoneMax + 1}px)`,\r\n  /*\r\n    ##Device = Tablets\r\n    ##Screen = B/w 768px to 1024px\r\n  */\r\n  tablet: `(min-width: ${SIZE.tabletMin}px)`,\r\n  /*\r\n    ##Device = Laptops, Desktops\r\n    ##Screen = B/w 1025px to 1280px\r\n  */\r\n  laptop: `(min-width: ${SIZE.laptopMin}px)`,\r\n  /*\r\n    ##Device = Desktops\r\n    ##Screen = 1281px to higher resolution desktops\r\n  */\r\n  desktop: `(min-width: ${SIZE.desktop}px)`\r\n};\r\n\r\nexport const cssStylesByDeviceWidth: TCssStylesByDeviceWidth = (typeDevice, props) => css`\r\n  @media ${MEDIA_QURIES[typeDevice]} {\r\n    ${props}\r\n  }\r\n`;\r\n","import { MEDIA_QURIES } from './mediaQueries';\n\nimport { TThemes } from './types';\n\nconst Theme = {\n  data: 'main',\n  id: 'T_001',\n  name: 'Main',\n  colors: {\n    fonts: {\n      primary: '#f1f1f1',\n      white: '#ffffff' as const,\n      grey: '#838383',\n      greySecondary: '#a6a6a6'\n    },\n    white: '#ffffff' as const,\n    body: '#FFFFFF',\n    primary: '#490e4b',\n    secondary: '#3b0044',\n    greyPrimary: '#cfcfcf',\n    greySecondary: '#e1dcdb',\n    hoverColor: '#f5f5f5' as const,\n    black: '#020000',\n    text: '#000000',\n    label: '#838383',\n    button: {\n      text: '#FFFFFF',\n      background: '#000000'\n    },\n    link: {\n      text: '#3b0044',\n      opacity: 1\n    }\n  },\n  mediaQueries: MEDIA_QURIES,\n  font: {\n    text: 'AauxPro OT'\n  }\n};\n\n//changed in the future this is only example\nexport const THEMES: TThemes = {\n  data: {\n    main: Theme,\n    otherTheme: Theme\n  }\n};\n","import { useState, useEffect } from 'react';\r\n\r\nimport { useTheme } from 'src/theme/useTheme';\r\n\r\nimport { TSingleTheme } from 'src/theme/types';\r\nimport { TReturnUseApp } from './types';\r\n\r\nexport const useApp = (): TReturnUseApp => {\r\n  const { theme, themeLoaded } = useTheme();\r\n  const [selectedTheme, setSelectedTheme] = useState<TSingleTheme>(theme);\r\n\r\n  useEffect(() => {\r\n    setSelectedTheme(theme);\r\n  }, [themeLoaded]);\r\n\r\n  return { selectedTheme, setSelectedTheme, themeLoaded };\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { THEMES } from './schema';\r\n\r\nimport { TSingleTheme, TThemes, TUseTheme } from './types';\r\n\r\nexport const useTheme = (): TUseTheme => {\r\n  const allThemes = THEMES;\r\n  const [theme, setTheme] = useState<TSingleTheme>(allThemes.data.main);\r\n  const [themeLoaded, setThemeLoaded] = useState<boolean>(false);\r\n\r\n  const setMode = (mode: TSingleTheme): void => setTheme(mode);\r\n\r\n  const handleSetTheme = (localThemes: TThemes): void => {\r\n    localThemes && setTheme(localThemes.data.main);\r\n    setThemeLoaded(true);\r\n  };\r\n\r\n  useEffect(() => handleSetTheme(THEMES), []);\r\n\r\n  return {\r\n    theme,\r\n    themeLoaded,\r\n    setMode,\r\n    handleSetTheme\r\n  };\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nimport { device } from 'src/styles/device';\r\n\r\nconst devicePadding = (\r\n  typeDevice: 'mobileSmall' | 'mobileLarge' | 'tablet' | 'laptop' | 'laptopLarge' | 'desktop',\r\n  padding: number\r\n) => css`\r\n  @media ${device[typeDevice]} {\r\n    padding: ${padding}rem;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  justify-content: center;\r\n  width: 100%;\r\n\r\n  ${devicePadding('mobileSmall', 0)}\r\n  ${devicePadding('mobileLarge', 0)}\r\n  ${devicePadding('tablet', 2)}\r\n  ${devicePadding('laptop', 2)}\r\n  ${devicePadding('laptopLarge', 2)}\r\n  ${devicePadding('desktop', 2)}\r\n`;\r\n","import { createGlobalStyle } from 'styled-components';\n\nimport { TSingleTheme } from './types';\n\nexport const GlobalStyles = createGlobalStyle<{ theme: TSingleTheme }>`\n  body {\n    background: ${({ theme }) => theme.colors.body};\n    color: ${({ theme }) => theme.colors.text};\n    font-family: ${({ theme }) => theme.font.text};\n    height: 100vh;\n    margin: 0 !important;\n  }\n\n  a {\n    color: ${({ theme }) => theme.colors.link.text};\n    cursor: pointer;\n  }\n\n  button {\n    border: 0;\n    display: inline-block;\n    padding: 12px 24px;\n    font-size: 14px;\n    border-radius: 4px;\n    margin-top: 5px;\n    cursor: pointer;\n    background-color: #1064EA;\n    color: #ffffff;\n    font-family: ${({ theme }) => theme.font};\n  }\n\n  button.btn {\n    background-color: ${({ theme }) => theme.colors.button.background};\n    color: ${({ theme }) => theme.colors.button.text};\n  }\n`;\n","import React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport UsersPage from 'src/pages/users-page';\r\n\r\nimport { useApp } from './useApp';\r\n\r\nimport { Container } from './styles';\r\nimport { GlobalStyles } from 'src/theme/GlobalStyles';\r\n\r\nexport default (): JSX.Element => {\r\n  const { selectedTheme, themeLoaded } = useApp();\r\n\r\n  return (\r\n    <>\r\n      {themeLoaded && (\r\n        <ThemeProvider theme={selectedTheme}>\r\n          <GlobalStyles />\r\n          <Container>\r\n            <UsersPage />\r\n          </Container>\r\n        </ThemeProvider>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}